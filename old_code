# CLIENT ENDPOINTS #
# @api.route(f'{GET_RESTAURANT_LIST}')
# class GetRestaurantList(Resource):
#     """
#     Provides users with a list of restaurants
#     """
#     def get(self):
#         return restaurants.get_restaurants()

    # @api.expect(restaurant_data)
    # def post(self):
    #     """
    #     Uses zip code and radius to generate the list
    #     of restaurants and sends it
    #     """
    #     data = request.json
    #     zip_code = data.get("rest_zipcode")
    #     RADIUS = 10
    #     zipcode_str = str(zip_code)
    #     if (int(zipcode_str[-2:]) <= 10):
    #         RADIUS = int(zipcode_str[-2:])
    #     nearby_zipcodes = {zip_code: 0}
    #     if RADIUS > 0:
    #         for i in range(1, RADIUS):
    #             nearby_zipcodes[zip_code-i] = 0
    #             nearby_zipcodes[zip_code+i] = 0
    #     else:
    #         for i in range(1, RADIUS):
    #             nearby_zipcodes[zip_code+i] = 0
    #     nearby_restaurants = {}
    #     for zip in nearby_zipcodes:
    #         nearby_restaurant = restaurants.get_nearby_restaurants(zip)
    #         if len(nearby_restaurant) > 0:
    #             nearby_restaurants.append(nearby_restaurant)
    #     if len(nearby_restaurants) == 0:
    #         return (
    #             'No restaurants found nearby in server'), 404
    #     return {nearby_restaurants}, 201



#     @api.route(f'{REMOVE_RESTAURANT}')
# class RemoveResturant(Resource):
#     """
#     users can remove restaurants
#     """
#     def post(self):
#         data = request.json
#         rest_name = data.get('rest_owner_id')

#         restaurant_list = restaurants.get_restaurants

#         if rest_name not in restaurant_list:
#             return (
#                 'Restaurant not found in server'), 404
#         restaurants.del_restaurant(rest_name)
#         return {'Removed' + rest_name + 'successfully!'}, 201



# # RESTAURANT ENDPOINTS #
# @api.route(f'{RESTAURANT_REGISTRATION}')
# class RestaurantRegistration(Resource):
#     """
#     Handles the registration of restaurants
#     """
#     @api.expect(restaurant_data)
#     def post(self):
#         """
#         Updates restaurants database with a new
#         restaurant entry
#         """
#         try:
#             data = request.get_json()
#             rest_id = data.get("rest_id")
#             rest_name = data.get("rest_name")
#             rest_address = data.get("rest_address")
#             rest_location_zip = data.get("rest_zipcode")
#             rest_owner_id = data.get("rest_owner_id")
#             restaurants.add_restaurant(
#                 rest_id,
#                 rest_name,
#                 rest_address,
#                 rest_location_zip,
#                 rest_owner_id
#             )

#             return {
#                 "SYSTEM_STATUS": "PASSED"
#                 }, 200
#         except ValueError as error:
#             return {
#                 "SYSTEM_STATUS": "FAILED",
#                 "ERROR_MESSAGE": str(error)
#             }, 406



# # get restaurant information for a client
# @api.route(f'{GET_RESTAURANT_INFO}')
# class GETRESTAURANTINFO(Resource):
#     """
#     Gets restaurant information that the client request for
#     """
#     @api.expect(rest_info_data)
#     def get(self):
#         data = request.get_json()
#         rest_name = data.get("rest_name")

#         restaurant_list = restaurants.get_list
#         if rest_name not in restaurant_list:
#             return (
#                 'Restaurant not found'), 404
#         rest_info = restaurants.get(rest_name)
#         return rest_info



# @api.route(f'{REMOVE_RESTAURANT}')
# class RemoveResturant(Resource):
#     """
#     users can remove restaurants
#     """
#     def post(self):
#         data = request.json
#         rest_name = data.get('rest_owner_id')

#         restaurant_list = restaurants.get_restaurants

#         if rest_name not in restaurant_list:
#             return (
#                 'Restaurant not found in server'), 404
#         restaurants.del_restaurant(rest_name)
#         return {'Removed' + rest_name + 'successfully!'}, 201


## Restaurant db

# def add_restaurant(restaurant_id: int, store_name: str,  store_address: str,
#                    store_zipcode: str, owner_id: int) -> int:
#     for rest_key in restaurants:
#         rest = restaurants[rest_key]

#         if rest[RESTAURANT_ID] == restaurant_id:
#             raise ValueError("restaurant id exists")

#         if (rest[ADDRESS] == store_address and
#            rest[ZIPCODE] == store_zipcode):
#             raise ValueError("Location already has a store")

#         if not (store_name and store_address and store_zipcode and owner_id):
#             raise ValueError("All attributes must be filled out")

#     restaurant = {
#         RESTAURANT_ID: restaurant_id,
#         NAME: store_name,
#         ADDRESS: store_address,
#         ZIPCODE: store_zipcode,
#         OWNER_ID: owner_id
#     }

#     dbc.connect_db()
#     _id = dbc.insert_one(REST_COLLECT, restaurant, RESTAURANT_DB)
#     return _id is not None


# # Working On everything below this
# @api.route(f'{ADD_RESTAURANT_MENUITEM}')
# class AddRestaurantMenuItem(Resource):
#     @api.expect(menu_item_data)
#     def post(self):
#         """
#         Adds new menu item to the restaurant's menu
#         """
#         try:
#             data = request.json
#             restaurant_id = data['restaurant_id']
#             item_name = data['item_name']
#             item_description = data['item_description']
#             item_price = data['item_price']
#             item_category = data['item_category']

#             menus.add_item_to_menu(restaurant_id, {
#                 'item_name': item_name,
#                 'item_description': item_description,
#                 'item_price': item_price,
#                 'item_category': item_category
#             })
#             return {
#                 "SYSTEM_STATUS": "PASSED"
#             }, 200
#         except ValueError as error:
#             return {
#                 "SYSTEM_STATUS": "FAILED",
#                 "ERROR_MESSAGE": str(error)
#             }, 406



# # Remove Restaurant Menu Items
# @api.route(f'{REMOVE_RESTAURANT_MENUITEM}')
# class RemoveRestaurantMenuItem(Resource):
#     @api.expect(menu_item_data)
#     def post(self):
#         """
#         removes item from the list
#         """
#         try:
#             data = request.json
#             restaurant_id = data['restaurant_id']
#             item_name = data['item_name']
#             menus.remove_item_from_menu(restaurant_id, item_name)
#             return {"MENU_STATUS": "PASS", "message": "Items removed"}, 200
#         except ValueError as error:
#             return {"MENU_STATUS": "FAIL", "ERROR_MESSAGE": str(error)}, 406



# # Set special menus for restaurant
# @api.route(f'{RESTAURANT_SPECIAL_MEALS}')
# class Restaurant_Special_Meals(Resource):
#     @api.expect(special_deals)
#     def put(self):
#         try:
#             data = request.json
#             restaurant_id = data['restaurant_id']
#             item_name = data['item_name']
#             item_price = data['item_price']
#             menus.special_deal_update_price(
#                 restaurant_id, item_name, item_price)
#             return {
#                 "SYSTEM_STATUS": "PASSED"
#             }, 200
#         except ValueError as error:
#             return {
#                 "SYSTEM_STATUS": "FAILED",
#                 "ERROR_MESSAGE": str(error)
#             }, 406


# class WriteReview(Resource):
#     """
#     Handles clients writing reviews on restaurants
#     """

#     @api.expect(restaurant_data)
#     @api.response(HTTPStatus.OK, 'Success')
#     @api.response(HTTPStatus.NOT_ACCEPTABLE, 'Not Acceptable')
#     def post(self):
#         """
#         update ratings with custumer reviews
#         """
#         data = request.json
#         restuarant_name = data.get('restaurant_name')
#         user_id = data.get('user_id')
#         review = data.get('review')
#         star = data.get('star')

#         restratings = ratings.get_ratings()

#         if (not isinstance(restuarant_name, str) and
#                 not isinstance(user_id, int) and
#                 not isinstance(review, str) and
#                 not isinstance(star, int)):
#             return {'Please enter valid information'}, 400
#         if restuarant_name not in restratings:
#             return {'the restaurant is not on our server'}, 404
#         else:
#             try:
#                 new_id = ratings.add_restaurant_rating(
#                     restuarant_name,
#                     user_id,
#                     review,
#                     star)
#                 if new_id is None:
#                     raise wz.ServiceUnavailable('We have a technical problem.')
#                 return {'review added successfully!'}, 201
#             except ValueError as e:
#                 raise wz.NotAcceptable(f'{str(e)}')


# # WORKING ON ALL BELOW HERE
# # Set options for restaurant
# @api.route(f'{SET_RESTAURANT_OPTIONS}')
# class SetRestaurantHours(Resource):
#     """
#     set the options for the restaurant
#     """
#     @api.expect(restaurant_data)
#     def post(self):
#         data = request.json
#         rest_name = data.get('rest_name')
#         rest_address = data.get('rest_address')
#         rest_hours = data.get('rest_hours')

#         # reservation_list = reservations.get_rest_reservation(rest_name)
#         restaurant_list = restaurants.get_restaurants

#         if rest_name not in restaurant_list:
#             return (
#                 'Restaurant not found in server'), 404
#         reservations.make_reservation(rest_name, rest_address)
#         return {'Reservation made for' + rest_name + 'at time' + rest_hours +
#                 'added successfully!'}, 201


# @api.route(f'{MAKE_RESERVATION}')
# class SetReservation(Resource):
#     """
#     users can reserve a table at a restaurant
#     """
#     def post(self):
#         data = request.json
#         rest_name = data.get('rest_name')
#         username = data.get('username')
#         time = data.get('time')
#         party_size = data.get('party_size')

#         # reservation_list = reservations.get_rest_reservation(rest_name)
#         restaurant_list = restaurants.get_restaurants

#         if rest_name not in restaurant_list:
#             return (
#                 'Restaurant not found in server'), 404
#         reservations.make_reservation(rest_name, username, time, party_size)
#         return {'Reservation made for' + rest_name + 'successfully!'}, 201


# @api.route(f'{REMOVE_RESTAURANT_RESERVATIONS}')
# class RemoveResturantReservations(Resource):
#     """
#     users can cancel all restaurant reservations
#     """
#     def post(self):
#         data = request.json
#         rest_name = data.get('rest_owner_id')

#         reservation_list = reservations.get_all_reservations

#         if rest_name not in reservation_list:
#             return (
#                 'Restaurant not found in server'), 404
#         reservations.del_reservations(rest_name)
#         return {'Cancelled' + rest_name + 'reservations successfully!'}, 201




# @api.route(f'{LOGIN_SYSTEM}')
# class LoginSystem(Resource):
#     """
#     This class handles user authentication using database
#     """
#     @api.expect(login_data)
#     def post(self):
#         """
#         Handles user login by checking the provided credentials
#         """

#         data = request.get_json()
#         user_email = data.get("user_email")
#         user_password = data.get("user_password")

#         try:
#             if (not isinstance(user_email, str) and
#                not isinstance(user_password, str)):
#                 # no feedback will do until we start working with the front-end
#                 raise TypeError(
#                     "One or more parameters for "
#                     "registration are not of type string"
#                     )

#             # Hardcoded User Database #
#             db_users = users.get_users()

#             # use bcrypt to hash user_password #
#             byte_password = user_password.encode('utf-8')

#             for users_key in db_users:
#                 user_info = db_users[users_key]
#                 if (user_info[users.EMAIL] == user_email and
#                    bcrypt.checkpw(byte_password, user_info[users.PASSWORD])):
#                     # return a token, some cookie, or create a session for user
#                     # load onto a new route
#                     return {
#                         "SYSTEM_STATUS": "PASSED"
#                     }, 200

#             return {
#                 "SYSTEM_STATUS": "FAILED"
#             }, 200

#         except Exception as error:
#             return {
#                 "SYSTEM_STATUS": "FAILED",
#                 "ERROR_MESSAGE": str(error)
#             }, 406


# @api.route(f'{REGISTRATION_SYSTEM}')
# class RegistrationSystem(Resource):
#     """
#     This class handles registration
#     """

#     @api.expect(registration_data)
#     def post(self):
#         """
#         Takes care of login information with the entered data information
#         """

#         data = request.get_json()
#         user_email = data.get("user_email")
#         user_password = data.get("user_password")
#         user_confirm_password = data.get("user_confirm_password")

#         try:
#             if (not isinstance(user_email, str) and
#                not isinstance(user_password, str) and
#                not isinstance(user_confirm_password, str)):
#                 # no feedback will do until we start working with the front-end
#                 raise TypeError(
#                     "One or more parameters for "
#                     "registration are not of type string"
#                     )

#             if user_password != user_confirm_password:
#                 raise Exception("Passwords don't match")

#             # Hardcoded User Database #
#             db_users = users.get_users()

#             # use bcrypt to hash user_password #
#             # byte_password = user_password.encode('utf-8')
#             # hashed_password = bcrypt.hashpw(byte_password, bcrypt.gensalt())

#             for users_key in db_users:
#                 user_info = db_users[users_key]
#                 if (user_info[users.EMAIL] == user_email):
#                     return {
#                         "SYSTEM_STATUS": "FAILED"
#                     }, 200

#             # Create a new record in database once that's up
#             # Store user_email and hased_password

#             byte_password = user_password.encode('utf-8')
#             hashed_password = bcrypt.hashpw(byte_password, bcrypt.gensalt())
#             users.add_user(user_email, hashed_password)

#             return {
#                 "SYSTEM_STATUS": "PASSED"
#             }, 200
#         except TypeError as error:
#             return {
#                 "SYSTEM_STATUS": "FAILED",
#                 "ERROR_MESSAGE": str(error)
#             }, 406
#         except Exception as error:
#             return {
#                 "SYSTEM_STATUS": "FAILED",
#                 "ERROR_MESSAGE": str(error)
#             }, 406

## Test EP ##


@pytest.mark.skip('skip this test, come back to it later')
def test_login_system():
    # PASSING CONDITION
    user_json = {"user_email": "app123@gmail.com", "user_password": "ericiscool"}
    resp = TEST_CLIENT.post(ep.LOGIN_SYSTEM, json=user_json)
    assert resp.status_code == 200
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "PASSED" in resp_json["SYSTEM_STATUS"]

    # FAILING CONDITION
    user_json = {"user_email": "FAKE_ACCOUNT@gmail.com", "user_password": "FAKE_ACCOUNT"}
    resp = TEST_CLIENT.post(ep.LOGIN_SYSTEM, json=user_json)
    assert resp.status_code == 200
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # Make sure email and password are strings
    user_json = {"user_email": 21412, "user_password": 1231242}
    resp = TEST_CLIENT.post(ep.LOGIN_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # Wrong JSON data
    user_json = {"WRONG_USER": "example@gmail.com", "WRONG_PASSWORD": "example"}
    resp = TEST_CLIENT.post(ep.LOGIN_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # No JSON data
    user_json = {}
    resp = TEST_CLIENT.post(ep.LOGIN_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

@pytest.mark.skip('skip this test, come back to it later')
def test_registration_system():
    # PASSING CONDITION
    user_json = {"user_email": "new_account@gmail.com", "user_password": "random_password", "user_confirm_password": "random_password"}
    resp = TEST_CLIENT.post(ep.REGISTRATION_SYSTEM, json=user_json)
    assert resp.status_code == 200
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'REGISTRATION ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "PASSED" in resp_json["SYSTEM_STATUS"]

    # FAILING CONDITION - Account Exists
    user_json = {"user_email": "app123@gmail.com", "user_password": "random_password", "user_confirm_password": "random_password"}
    resp = TEST_CLIENT.post(ep.REGISTRATION_SYSTEM, json=user_json)
    assert resp.status_code == 200
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'REGISTRATION ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # FAILING CONDITION - Password don't match
    user_json = {"user_email": "new_account@gmail.com", "user_password": "random_password", "user_confirm_password": "other_password"}
    resp = TEST_CLIENT.post(ep.REGISTRATION_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'REGISTRATION ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # Make sure email and passwords are strings
    user_json = {"user_email": 123, "user_password": 12414, "user_confirm_password": 533.12}
    resp = TEST_CLIENT.post(ep.REGISTRATION_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # Wrong JSON data
    user_json = {"WRONG_USER": "example@gmail.com", "WRONG_PASSWORD": "example", "WRONG_CONFIRM": "example"}
    resp = TEST_CLIENT.post(ep.REGISTRATION_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]

    # No JSON data
    user_json = {}
    resp = TEST_CLIENT.post(ep.REGISTRATION_SYSTEM, json=user_json)
    assert resp.status_code == 406
    resp_json = resp.get_json()
    assert "SYSTEM_STATUS" in resp_json
    print(f'LOGIN ATTEMPT: {resp_json["SYSTEM_STATUS"]}')
    assert "FAILED" in resp_json["SYSTEM_STATUS"]


# ### Restaurant Registration Tests ###
# @patch('db.restaurants.add_restaurant', side_effect=None, autospec=True)
# def test_good_restaurant_registration(mock_add):
#     resp = TEST_CLIENT.post(ep.RESTAURANT_REGISTRATION, json=rest.get_test_restaurant())
#     assert resp.status_code == OK


# @patch('db.restaurants.add_restaurant', side_effect=ValueError, autospec=True)
# def test_bad_restaurant_registration(mock_add):
#     resp = TEST_CLIENT.post(ep.RESTAURANT_REGISTRATION, json=rest.get_test_restaurant())
#     assert resp.status_code == NOT_ACCEPTABLE


### Add Menu Tests ###
# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.add_item_to_menu', side_effect=None, autospec=True)
# def test_good_add_menu(mock_add):
#     resp = TEST_CLIENT.post(ep.ADD_RESTAURANT_MENUITEM, json=menus.get_test_menu())
#     assert resp.status_code == OK

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.add_item_to_menu', side_effect=ValueError, autospec=True)
# def test_bad_add_menu(mock_add):
#     resp = TEST_CLIENT.post(ep.ADD_RESTAURANT_MENUITEM, json=menus.get_test_menu())
#     assert resp.status_code == NOT_ACCEPTABLE


# @pytest.mark.skip('skip this test, come back to it later')
# def test_addmenuitem():
#     # return successfully added message
#     user_json = {"restaurant_name": "Restaurant1", "item_name": "Spagetti", "item_description": "spicy", "item_price": 5.68, "item_category": "Spagetti"}
#     resp = TEST_CLIENT.post(ep.ADD_RESTAURANT_MENUITEM, json=user_json)
#     assert resp.status_code == 201
#     resp_json = resp.get_json()
#     assert "MENU_STATUS" in resp_json
#     print(f'RestaurantMenu: {resp_json["MENU_STATUS"]}')
#     assert "PASS" in resp_json["MENU_STATUS"]


# @pytest.mark.skip('skip this test, come back to it later')
# def test_add_review():
#     user_json = {
#     "restaurant_name": "Terrific Tacos", 
#     "user_id": '3', 
#     "review": "It's alright",
#     "star": '2'
#     }
#     resp = TEST_CLIENT.post(ep.PROVIDE_REVIEW, json=user_json)
#     assert resp.status_code == 201


# @pytest.mark.skip('skip this test, come back to it later')
# def test_make_reservation():
#     user_json = {
#         'rest_name': 'Terrific Tacos',
#         'username': 'Mary123',
#         'time': '2023-12-23 23:00',
#         'party_size': 3
#     }
#     resp = TEST_CLIENT.post(ep.MAKE_RESERVATION, json=user_json)
#     assert resp.status_code == 201

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.ratings.add_restaurant_rating', side_effect=rvws.MOCK_ID, autospec=True)
# def test_add_review(mock_add):
#     """
#     Testing we do the right thing with a good return from add_resturant_rating.
#     """
#     resp = TEST_CLIENT.post(ep.PROVIDE_REVIEW, json=rvws.get_test_rating())
#     assert resp.status_code == OK or 500


# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.ratings.add_restaurant_rating', side_effect=ValueError(), autospec=True)
# def test_add_review_incorrect(mock_add):
#     """
#     Testing we do the right thing with a value error from add_resturant_rating.
#     """
#     resp = TEST_CLIENT.post(ep.PROVIDE_REVIEW, json=rvws.get_test_rating())
#     assert resp.status_code == NOT_ACCEPTABLE or 500


# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.ratings.add_restaurant_rating', side_effect=None)
# def test_add_review_not_in_db(mock_add):
#     """
#     Testing we do the right thing with a None from add_resturant_rating.
#     """
#     resp = TEST_CLIENT.post(ep.PROVIDE_REVIEW, json=rvws.get_test_rating())
#     assert resp.status_code == SERVICE_UNAVAILABLE or 500


# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.del_item_from_menu', side_effect=None, autospec=True)
# def test_good_delete_menu(mock_add):
#     resp = TEST_CLIENT.post(ep.REMOVE_RESTAURANT_MENUITEM, json=menus.get_test_menu())
#     assert resp.status_code == OK


# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.del_item_from_menu', side_effect=ValueError, autospec=True)
# def test_bad_delete_menu(mock_add):
#     resp = TEST_CLIENT.post(ep.REMOVE_RESTAURANT_MENUITEM, json=menus.get_test_menu())
#     assert resp.status_code == 404
    

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('restaurants.get', return_value={'name': 'Restaurant1', 'cuisine': 'Italian'})
# def test_get_restaurant_info(self, mock_get, mock_get_list):
#     resp = TEST_CLIENT.post(ep.GET_RESTAURANT_INFO, json=user_json)
#     assert resp.status_code == NOT_ACCEPTABLE

# @pytest.mark.skip('skip this test, come back to it later')
# def test_get_nearby_resturants():
#     location_json = {
#     "rest_zipcode": "10004",
#     }
#     resp = TEST_CLIENT.post(ep.GET_RESTAURANT_LIST, json=location_json)
#     assert resp.status_code == 201

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.special_deal_update_price', side_effect=None, autospec=True)
# def test_good_special_deal(mock_add):
#     resp = TEST_CLIENT.put(ep.RESTAURANT_SPECIAL_MEALS, json=menus.get_special_test_menu())
#     assert resp.status_code == OK

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.special_deal_update_price', side_effect=ValueError, autospec=True)
# def test_good_special_deal(mock_add):
#     resp = TEST_CLIENT.put(ep.RESTAURANT_SPECIAL_MEALS, json=menus.get_special_test_menu())
#     assert resp.status_code == SERVICE_UNAVAILABLE or 500

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.menus.special_deal_update_price', side_effect=ValueError, autospec=True)
# def test_good_special_deal(mock_add):
#     resp = TEST_CLIENT.put(ep.RESTAURANT_SPECIAL_MEALS, json=menus.get_special_test_menu())
#     assert resp.status_code == NOT_ACCEPTABLE

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.reservations.del_reservations', side_effect=None, autospec=True)
# def test_bad_delete_reservations(mock_add):
#     user_json = {
#     'rest_name': "Terrific Tacos", 
#     'username': 'Jack', 
#     "time": "2023-11-08 19:00",
#     "party_size": '5'
#     }
#     resp = TEST_CLIENT.post(ep.REMOVE_RESTAURANT_RESERVATIONS, json=user_json)
#     assert resp.status_code == 404

# @pytest.mark.skip('skip this test, come back to it later')
# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.restaurants.del_restaurant', side_effect=None, autospec=True)
# def test_bad_delete_restaurant(mock_add):
#     resp = TEST_CLIENT.post(ep.REMOVE_RESTAURANT_RESERVATIONS, json=rest.get_test_restaurant())
#     assert resp.status_code == 404


# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.restaurants.get_restaurants', side_effect=None, autospec=True)
# def test_get_restaurant_id(mock_add):
#     """
#     Testing with a good return from get_test_restaurant.

#     """
#     resp = TEST_CLIENT.post(ep.Restaurant_EP, json=rest.get_restaurants)
#     assert resp.status_code == OK


# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.restaurants.del_restaurant', side_effect=None, autospec=True)
# def test_delete_get_restaurant_id(mock_add):
#     """
#     Testing with a good delete return from get_test_restaurant.

#     """
#     resp = TEST_CLIENT.post(ep.Restaurant_EP, json=rest.del_restaurant)
#     assert resp.status_code == OK or 500

# @pytest.mark.skip('skip this test, come back to it later')
# @patch('db.restaurants.add_restaurant', side_effect=None, autospec=True)
# def test_register_add_restaurant(mock_add):
#     """
#     Testing with a restaurant entry

#     """
#     resp = TEST_CLIENT.post(ep.Add_Restaurant, json=rest.get_test_restaurant)
#     assert resp.status_code == OK
